#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include <math.h>
#include "secrets.h"

// I2C LCD setup: Address 0x27 for a 16x2 LCD (adjust if needed)
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Wi-Fi credentials
//const char* ssid = "your_SSID";        // Replace with your WiFi SSID
//const char* password = "your_PASSWORD"; // Replace with your WiFi password

WiFiClient client;  // Create a WiFiClient object

// LED pin
const int ledPin = D5;  // Red LED connected to D5

// Cape Town coordinates
const float myLat = -33.9249;
const float myLon = 18.4241;

// Threshold distance for "close" (in km)
const float distanceThreshold = 2000.0;

// Timer for scrolling
unsigned long previousMillis = 0; 
const long interval = 5000; // 5 seconds between scrolls
bool showLatLon = true;  // Flag to toggle between lat/lon and distance

// Variables to store ISS data
float issLat = 0;
float issLon = 0;
float distance = 0;

void setup() {
  Serial.begin(115200);
  
  // Initialize LED
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW); // Turn off LED initially
  
  // Initialize LCD
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("ISS Tracker");
  delay(2000);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Get ISS position and check proximity
  getISSLocationAndCheckProximity();
}

void getISSLocationAndCheckProximity() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    
    // Fetch the ISS location
    http.begin(client, "http://api.open-notify.org/iss-now.json");
    int httpCode = http.GET();
    
    if (httpCode > 0) {
      String payload = http.getString();
      Serial.println("ISS Data: " + payload);

      // Parse JSON response
      StaticJsonDocument<512> doc;
      DeserializationError error = deserializeJson(doc, payload);
      
      if (!error) {
        issLat = doc["iss_position"]["latitude"];
        issLon = doc["iss_position"]["longitude"];
        
        // Calculate distance to ISS from your location
        distance = calculateDistance(myLat, myLon, issLat, issLon);
        
        // Print data to Serial
        Serial.print("ISS Latitude: ");
        Serial.println(issLat);
        Serial.print("ISS Longitude: ");
        Serial.println(issLon);
        Serial.print("Distance: ");
        Serial.print(distance);
        Serial.println(" km");

        // If ISS is within the threshold distance, turn on LED
        if (distance <= distanceThreshold) {
          digitalWrite(ledPin, HIGH); // Turn on the LED
        } else {
          digitalWrite(ledPin, LOW);  // Turn off the LED
        }
      } else {
        Serial.println("JSON Parsing failed");
      }
    }
    http.end(); // End the HTTP request
  }
}

// Function to calculate distance between two coordinates (in km) using Haversine formula
float calculateDistance(float lat1, float lon1, float lat2, float lon2) {
  const float R = 6371.0; // Radius of the Earth in km
  float dLat = radians(lat2 - lat1);
  float dLon = radians(lon2 - lon1);
  float a = sin(dLat / 2) * sin(dLat / 2) + cos(radians(lat1)) * cos(radians(lat2)) * sin(dLon / 2) * sin(dLon / 2);
  float c = 2 * atan2(sqrt(a), sqrt(1 - a));
  float distance = R * c; // Distance in km
  return distance;
}

void loop() {
  // Update ISS position every 10 seconds and check proximity
  static unsigned long lastISSUpdate = 0;
  if (millis() - lastISSUpdate >= 10000) { // 10-second update interval
    lastISSUpdate = millis();
    getISSLocationAndCheckProximity();
  }

  // Handle scrolling between latitude/longitude and distance every 5 seconds
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    showLatLon = !showLatLon; // Toggle between showing lat/lon and distance

    lcd.clear();
    if (showLatLon) {
      // Show Latitude and Longitude
      lcd.setCursor(0, 0);
      lcd.print("Lat: ");
      lcd.print(issLat, 2);  // Limit to 2 decimal places
      lcd.setCursor(0, 1);
      lcd.print("Lon: ");
      lcd.print(issLon, 2);
    } else {
      // Show Distance
      lcd.setCursor(0, 0);
      lcd.print("Dist: ");
      lcd.print(distance, 1);  // Show distance in km, 1 decimal place
      lcd.setCursor(0, 1);
      lcd.print("km to ISS");
    }
  }
}
